---
title: "수소충전소 입지 선정"
format:
  html:
    toc: true
    toc-title: "목차"
    html-math-method: katex
    css: styles.css
    author:
        - name: Jungwoo Lee
    code-fold: true
    code-summary: "code"
---

> data mining 개인 프로젝트

## 1. 분석배경 및 필요성
**수소차 증가와 충전소 부족**   
요즘 운전하다 보면 전기차, 수소차와 같은 친환경차가 많이 보인다. 실제로 전체 자동차 누적 등록대수 2천550만3천대(20223년 01월 기준)중 친환경차(전기·수소·하이브리드)가 총 159만대 (6.2%)를 차지하며 약진을 계속하고 있다. 전기차는 늘어가는 수에 맞춰 충전소도 늘어나고 있지만 수소차는 그러지 못하고 있다. 
현재 우리나라에서 수소차 누적 판매량은 2만대가 넘었고 매년 약 1만대정도 팔리고 있습니다. 실제로 2021년 현대 자동차의 수소자동차인 넥쏘의 내수 판매량은 8473대로 꽤 많이 팔렸다는 것을 알 수 있습니다. 하지만 수소차 판매량에 비해 충전소는 턱없이 부족한 상황이다. 2021년 기준 수소충전소는 148기로 충전소 한개당 약 135대를 충전해야하는 상황이다.
<center>
<img src = "hc.png" width = "900"><br/>
</center>

**수소충전소 구축의 어려움**   
앞서 수소충전소가 148기 있다고 얘기했는데 국토교통부의 발표에 따르면 2040년까지 수소충전소를 1200기를 설치하겠다고 발표했다. 수소충전소는 1기를 짓는데 약 `20억에서 30억`정도의 비용이 들어간다. 국토교통부의 계획인 1200기를 다 짓는다고 가정하면 약 `3조6000억`정도의 어마어마한 비용이 들어간다. 또한, 수소충전시설의 경우 부정적인 인식을 가지고 있다. 따라서 인구밀도가 높은 수도권의 경우 부지확보 곤란 및 주민 수용성 등의 문제로 충전소 입지 선정에 어려움을 겪고 있다. 수소연료공급시설은 전기차 충전소와 달리 건축법 시행령 제19호의 위험물 저장 및 처리시설에 해당하므로 사전에 부지 적정성을 확인해야 한다. 이때, 교육환경보호법률과 주택건설기준규정에 따라 학교, 공동주택, 어린이놀이터, 의료시설, 유치원, 어린이집, 경로당 등으로부터 수평거리 50m 이상 떨어진 곳에 배치되어야 하므로 수소충전소 부지 선정 시 고려해야 하는 요소가 많다. 따라서 인구밀도가 높은 수도권의 경우, 이러한 규제요인들을 고려하기가 까다롭다. 그래서 데이터를 활용해 적절한 수소충전소 설치 지역을 알아낼려고 한다. 
<center>
<img src = "hc1.png" width = "900"><br/>
</center>

## 2. 분석목적
정부에서 말한 전략적 배치는 인구밀도가 현저히 낮은 지역, 지자체, 민간 참여가 어려운 지역 등 국민 참여 및 공공성 확보를 위해 전략적으로 구축하고 충전소가 부족한 지역 및 인접지역을 우선적으로 구축 예정이다. 수소차 보급 초기 단계는 대중화 유도를 위해 2025년까지 전국 시,군,구에 수소충전소를 1기씩 설치하는게 정부 목표이다. 따라서 본 프로젝트에서는 환경부의 수소충전소 전략적 배치 계획과 수소충전소 구축 운영 매뉴얼을 배경으로 특정지역을 선택해 각 구별로 수소충전소 최적 입지 선정을 하는 것이 목표로 한다.
<center>
<img src = "분석목적.png" width = "900"><br/>
</center>

## 3. 분석 로드맵 & 수소충전소 설립 지역 확인
<center>
<img src = "로드맵.png" width = "800"><br/>
</center>

```{python}
# 패키지 로드
import geopandas as gpd
import pandas as pd
import math
import pydeck

import folium
from folium import Choropleth, Circle, Marker
from folium.plugins import HeatMap, MarkerCluster
```
`한국가스안전공사_수소충전소_현황` 데이터를 가지고 수소충전소 위치를 맵핑 해봤다.
```{python}
# data load
hc_location = pd.read_csv('/Users/jungwoolee/Desktop/project/data mining/hc_acc.csv')

# markercluster
m = folium.Map(location = [36.5053, 127.7043], tiles = 'cartodbpositron', zoom_start = 8)

# 지도에 표시
mc = MarkerCluster()
for idx, row in hc_location.iterrows():
    if not math.isnan(row['경도']) and not math.isnan(row['위도']):
        mc.add_child(Marker([row['위도'], row['경도']]))
m.add_child(mc)

m
```
`2023년_04월_자동차_등록자료_통계`로 현재 수소자동차의 현황을 파악학고 `한국가스안전공사_수소충전소_현황`을 이용해 각 지역에 충전소가 몇개 있는지 파악하고 지역마다 충전소당 충전차량이 몇대인지 계산해서 `hydrogen fueled car info` 데이터를 새로 만들었다.
<left>
<img src = "hc_2.png" width = "1100"><br/>
</left>

이 표와 그래프를 보면 **부산광역시**가 충전소당_충전차량이 660대로 전국에서 수소자동차 대비 충전소가 가장 부족한 상황인 것을 파악할 수 있다. 따라서 **부산광역시**에 수소충전소가 추가로 설치돼야 한다. 그래서 **부산광역시**를 특정지역으로 선택했다.

## 4. 분석 과정
**분석 과정 (1) - 데이터 선정**

수소충전소 설치시 고려해야하는 요인을 입지요인과 규제요인으로 분류하였다. 규제요인의 경우 수소충전소 설치 시 적용되는 규제이며, 현재 실질적으로 적용되는 법률은 교육환경보호법률과 주택건설기준규정이다. 입지요인은 크게 용이성, 안전성, 경제성으로 나눌 수 있다.

활용한 데이터 셋은 다음과 같다.

<center>
<img src = "데이터.png" width = "800"><br/>
</center>


**분석 과정 (2) - 데이터 시각화**  

입지선정변수 데이터가 수소충전소 입지 선정에 유의미한 영향을 미치는지 검토하기 위해 각각의 변수를 시각화하였다.
아래는 수소차량수, 생활인구, 인구밀도, 화재발생, 공시지가 총 5개 입지선정변수이다.

```{python}
#| include: false
# data load
## 수소충전소 위경도 데이터
hc_location = pd.read_csv('/Users/jungwoolee/Desktop/project/data mining/hc_acc.csv')

## 부산광역시 구별 수소자동차 등록 현황 
bs = pd.read_csv("/Users/jungwoolee/Desktop/project/data mining/bs_hc.csv")

## geodata
geo_data = gpd.read_file("/Users/jungwoolee/Downloads/LARD_ADM_SECT_SGG_부산/LARD_ADM_SECT_SGG_26.shp", encoding = 'euc-kr')

#| include: false
bs_pop = pd.read_csv('/Users/jungwoolee/Desktop/project/data mining/busan_popular.csv')
bs_fire = pd.read_csv('/Users/jungwoolee/Desktop/project/data mining/부산시_화재.csv')
school = pd.read_csv('/Users/jungwoolee/Desktop/project/data mining/busan_school.csv')
kinder = pd.read_csv('/Users/jungwoolee/Desktop/project/data mining/busan_kinder.csv')
hospital = pd.read_csv('/Users/jungwoolee/Desktop/project/data mining/부산광역시_종합병원 현황_20230302.csv', encoding = 'euc-kr')
senior = pd.read_csv('/Users/jungwoolee/Desktop/project/data mining/부산광역시_경로당 현황_20220208.csv', encoding = 'CP949')
geo_bs_lf = pd.merge(geo_data, bs, left_on = 'SGG_NM', right_on='SGG_NM', how='left')
geo_pop_lf = pd.merge(geo_data, bs_pop, left_on = 'SGG_NM', right_on = 'SGG_NM', how = 'left')
geo_fire_lf = pd.merge(geo_data, bs_fire, left_on = 'SGG_NM', right_on = 'SGG_NM', how = 'left')

```
:::{layout-ncol=2}

```{python}
#| echo: false
#| fig-cap: '수소차량수'
from folium.features import GeoJsonTooltip

# 마커
m = folium.Map(location = [35.1796, 129.0750], tiles='CartoDB positron', zoom_start = 9)

Choropleth(geo_data = geo_data['geometry'],
           data = bs['수소차_등록수'],
           columns = [bs['SGG_NM'], bs['수소차_등록수']],
           key_on = "feature.id", 
           fill_color = 'YlGnBu',
           line_opacity = 0.2,
           legend_name = '부산광역시 구별 수소자동차 등록수').add_to(m)

bordersStyle = {
    'color': '#696969',    # 라인의 색상을 '#696969'로 설정합니다.
    'weight': 1            # 라인의 두께를 1로 설정합니다.
}

folium.GeoJson(
    data = geo_bs_lf,
    style_function=lambda x:bordersStyle,
    popup=folium.GeoJsonPopup(
        fields=['SGG_NM', '수소차_등록수'],
        aliases=['구:', '수소차 수:']
    )
).add_to(m)

folium.Circle([35.113698, 128.843072], radius = 10, color = "#FF0000", tooltip = "(주)엔케이텍 서부산").add_to(m)
folium.Circle([35.145745, 128.988180], radius = 10, color = "#FF0000", tooltip = "대도하이젠(주)수소복합충전소").add_to(m)
folium.Circle([35.328968, 129.201549], radius = 10, color = "#FF0000", tooltip = "하이넷 부산 정관 수소충전소").add_to(m)

m
```
```{python}
#| echo: false
#| fig-cap: '인구밀도'
m_2 = folium.Map(location = [35.1796, 129.0750], tiles='CartoDB positron', zoom_start = 9)

Choropleth(geo_data = geo_data['geometry'],
           data = bs_pop['인구밀도 (명/㎢)'],
           columns = [bs_pop['SGG_NM'], bs_pop['인구밀도 (명/㎢)']],
           key_on = "feature.id", 
           fill_color = 'YlGnBu',
           line_opacity = 0.2,
           legend_name = '부산광역시 구별 인구밀도 (명/㎢)').add_to(m_2)

bordersStyle = {
    'color': '#696969',    # 라인의 색상을 '#696969'로 설정합니다.
    'weight': 1            # 라인의 두께를 1로 설정합니다.
}

folium.GeoJson(
    data = geo_pop_lf,
    style_function=lambda x:bordersStyle,
    popup=folium.GeoJsonPopup(
        fields=['SGG_NM', '인구밀도 (명/㎢)'],
        aliases=['구:', '인구밀도 (명/㎢):']
    )
).add_to(m_2)

folium.Circle([35.113698, 128.843072], radius = 10, color = "#FF0000", tooltip = "(주)엔케이텍 서부산").add_to(m_2)
folium.Circle([35.145745, 128.988180], radius = 10, color = "#FF0000", tooltip = "대도하이젠(주)수소복합충전소").add_to(m_2)
folium.Circle([35.328968, 129.201549], radius = 10, color = "#FF0000", tooltip = "하이넷 부산 정관 수소충전소").add_to(m_2)

m_2
```
:::

:::{layout-ncol=2}
```{python}
#| echo: false
#| fig-cap: '생활인구'
m_4 = folium.Map(location = [35.1796, 129.0750], tiles='CartoDB positron', zoom_start = 9)

Choropleth(geo_data = geo_data['geometry'],
           data = bs_pop['인구수 (명)'],
           columns = [bs_pop['SGG_NM'], bs_pop['인구수 (명)']],
           key_on = "feature.id", 
           fill_color = 'YlGnBu',
           line_opacity = 0.2,
           legend_name = '부산광역시 구별 생활인구 (명)').add_to(m_4)

bordersStyle = {
    'color': '#696969',    # 라인의 색상을 '#696969'로 설정합니다.
    'weight': 1            # 라인의 두께를 1로 설정합니다.
}

folium.GeoJson(
    data = geo_pop_lf,
    style_function=lambda x:bordersStyle,
    popup=folium.GeoJsonPopup(
        fields=['SGG_NM', '인구수 (명)'],
        aliases=['구:', '생활인구 (명):']
    )
).add_to(m_4)

folium.Circle([35.113698, 128.843072], radius = 10, color = "#FF0000", tooltip = "(주)엔케이텍 서부산").add_to(m_4)
folium.Circle([35.145745, 128.988180], radius = 10, color = "#FF0000", tooltip = "대도하이젠(주)수소복합충전소").add_to(m_4)
folium.Circle([35.328968, 129.201549], radius = 10, color = "#FF0000", tooltip = "하이넷 부산 정관 수소충전소").add_to(m_4)

m_4
```

```{python}
#| echo: false
#| fig-cap: '화재발생'
m_3 = folium.Map(location = [35.1796, 129.0750], tiles='CartoDB positron', zoom_start = 9)

Choropleth(geo_data = geo_data['geometry'],
           data = bs_fire['화재발생'],
           columns = [bs_fire['SGG_NM'], bs_fire['화재발생']],
           key_on = "feature.id", 
           fill_color = 'YlGnBu',
           line_opacity = 0.2,
           legend_name = '부산광역시 구별 화재발생 수 (개)').add_to(m_3)

bordersStyle = {
    'color': '#696969',    # 라인의 색상을 '#696969'로 설정합니다.
    'weight': 1            # 라인의 두께를 1로 설정합니다.
}

folium.GeoJson(
    data = geo_fire_lf,
    style_function=lambda x:bordersStyle,
    popup=folium.GeoJsonPopup(
        fields=['SGG_NM', '화재발생'],
        aliases=['구:', '화재발생 수:']
    )
).add_to(m_3)

folium.Circle([35.113698, 128.843072], radius = 10, color = "#FF0000", tooltip = "(주)엔케이텍 서부산").add_to(m_3)
folium.Circle([35.145745, 128.988180], radius = 10, color = "#FF0000", tooltip = "대도하이젠(주)수소복합충전소").add_to(m_3)
folium.Circle([35.328968, 129.201549], radius = 10, color = "#FF0000", tooltip = "하이넷 부산 정관 수소충전소").add_to(m_3)

m_3
```
:::

```{python}
#| echo: false
#| fig-cap: '규제(초등학교, 유치원, 경로당, 종합병원)'
m_5 = folium.Map(location = [35.1796, 129.0750], tiles='Stamen Terrain', zoom_start = 12)

# Add  points to the map
feature_group = folium.FeatureGroup(name = '초등학교')
for _, row in school.iterrows():
    Circle(location = [row['위도'], row['경도']],
           radius = 50,
           color = '#4B0082',
           fill_color = '#8A2BE2',
           tooltip = row['학교명'],
    ).add_to(feature_group)
feature_group2 = folium.FeatureGroup(name = '유치원')
for _, row in kinder.iterrows():
    Circle(location = [row['위도'], row['경도']],
           radius = 50,
           color = '#1E90FF',
           fill_color = '#1E90FF',
           tooltip = row['유치원명'],
    ).add_to(feature_group2)

feature_group3 = folium.FeatureGroup(name = '종합병원')
for _, row in hospital.iterrows():
    Circle(location = [row['위도'], row['경도']],
           radius = 50,
           color = '#00FF00',
           fill_color = '#00FF00',
           tooltip = row['의료기관명'],
    ).add_to(feature_group3)

feature_group4 = folium.FeatureGroup(name = '경로당')
for _, row in senior.iterrows():
    Circle(location = [row['위도'], row['경도']],
           radius = 50,
           color = '#8B4513',
           fill_color = '#8B4513',
           tooltip = row['경로당명'],
    ).add_to(feature_group4)
    
feature_group.add_to(m_5)
feature_group2.add_to(m_5)
feature_group3.add_to(m_5)
feature_group4.add_to(m_5)

folium.TileLayer('CartoDB positron',overlay=False).add_to(m_5)

folium.LayerControl('topright').add_to(m_5)

folium.Circle([35.113698, 128.843072], radius = 10, color = "#FF0000", tooltip = "대도하이젠(주)수소복합충전소").add_to(m_5)
folium.Circle([35.145745, 128.988180], radius = 10, color = "#FF0000", tooltip = "대도하이젠(주)수소복합충전소").add_to(m_5)
folium.Circle([35.328968, 129.201549], radius = 10, color = "#FF0000", tooltip = "하이넷 부산 정관 수소충전소").add_to(m_5)

m_5.add_child(feature_group)
m_5.add_child(feature_group2)

# Display the map
m_5
```

**분석 과정 (3) - 회귀분석** 

(1) 행정동별 수소충전소 개수를 종속 변수로, 입지선정변수 데이터 5개를 독립 변수로 설정해 회귀분석을 실행하였다.   
(2) 그중 유의한 3개의 독립 변수만 다시 회귀분석을 실행한다.   
(3) 회귀분석 결과, 5개의 독립변수 중 유의한 값을 가진 3개의 변수를 입지선정변수로 선정한다. 회귀분석 결과를 바탕으로 각각의 변수에 입지선정지수(가중치)를 설정한다.

각각의 가중치는 다음과 같다.

- 인구밀도: -0.09

- 화재건수: 0.16

- 수소차량수: 0.20

**분석 과정 (4) - 최종입지선정**

1위: 기장군

2위: 강서구

3위: 사상구

4위: 금정구

5위: 남구

순으로 결과가 나왔다. 여기서 공시지가를 고려해 사상구, 금정구, 남구에 1기씩 설치하기러 했다. 

## 5. 분석 결과
```{python}
#| echo: false

m_10 = folium.Map(location = [35.1796, 129.0750], tiles='CartoDB positron', zoom_start = 10)

Choropleth(geo_data = geo_data['geometry'],
           columns = [bs['SGG_NM'], bs['수소차_등록수']],
           key_on = "feature.id", 
           fill_color = 'YlGnBu',
           line_opacity = 0.2,
           legend_name = '부산광역시 구별 수소자동차 등록수').add_to(m_10)

bordersStyle = {
    'color': '#000000',    # 라인의 색상을 '#696969'로 설정합니다.
    'weight': 1            # 라인의 두께를 1로 설정합니다.
}

folium.GeoJson(
    data = geo_data,
    style_function=lambda x:bordersStyle,
    popup=folium.GeoJsonPopup(
        fields=['SGG_NM'],
        aliases=['구']
    )
).add_to(m_10)



folium.Circle([35.223861, 129.114668], radius = 10, color = "#0000FF", tooltip = "금정구 수소충전소 입지").add_to(m_10)
# 개별공시지가 482,700원
folium.Circle([35.148238, 128.975323], radius = 10, color = "#0000FF", tooltip = "사상구 수소충전소 입지").add_to(m_10)
# 개별공시지가 1,703,000원
folium.Circle([35.124251, 129.098487], radius = 10, color = "#0000FF", tooltip = "연제구 수소충전소 입지").add_to(m_10)
# 개별공시지가 1,410,000원
folium.Circle([35.113698, 128.843072], radius = 10, color = "#FF0000", tooltip = "(주)엔케이텍 서부산").add_to(m_10)
folium.Circle([35.145745, 128.988180], radius = 10, color = "#FF0000", tooltip = "대도하이젠(주)수소복합충전소").add_to(m_10)
folium.Circle([35.328968, 129.201549], radius = 10, color = "#FF0000", tooltip = "하이넷 부산 정관 수소충전소").add_to(m_10)

m_10
```

<span style="color:red">빨간점</span>: 기존 수소충전소   
<span style="color:blue">파란점</span>: 신규 수소충전소 

기존 3기에서 6기를 늘어남으로써 충전소당 충전차량이 330대로 서울시와 똑같아졌다.

## 6. 의의와 한계점

**의의**

1) 다양한 변수 고려   

2) 정부 정책에 직접적이고 즉각적인 반영 가능

3) 수소충전소 균등 분배 도모

**한계점**

1) 데이터의 정확도 모호

2) 지역 균등의 문제
